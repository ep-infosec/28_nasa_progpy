
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/derived_params.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_derived_params.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_derived_params.py:


Example demonstrating ways to use the derived parameters feature for model building. 

.. GENERATED FROM PYTHON SOURCE LINES 7-47

.. code-block:: default


    from prog_models.models.thrown_object import ThrownObject

    def run_example():
        # For this example we will use the ThrownObject model from the new_model example.
        # We will extend that model to include a derived parameter
        # Let's assume that the throwing_speed was actually a function of thrower_height 
        # (i.e., a taller thrower would throw the ball faster).
        # Here's how we would implement that

        # Step 1: Define a function for the relationship between thrower_height and throwing_speed.
        def update_thrown_speed(params):
            return {
                'throwing_speed': params['thrower_height'] * 21.85
            }  # Assumes thrown_speed is linear function of height
        # Note: one or more parameters can be changed in these functions, whatever parameters are changed are returned in the dictionary

        # Step 2: Define the param callbacks
        ThrownObject.param_callbacks.update({
                'thrower_height': [update_thrown_speed]
            })  # Tell the derived callbacks feature to call this function when thrower_height changes.
        # Note: Usually we would define this method within the class
        #  for this example, we're doing it separately to improve readability
        # Note2: You can also have more than one function be called when a single parameter is changed.
        #  Do this by adding the additional callbacks to the list (e.g., 'thrower_height': [update_thrown_speed, other_fcn])

        # Step 3: Use!
        obj = ThrownObject()
        print("Default Settings:\n\tthrower_height: {}\n\tthowing_speed: {}".format(obj.parameters['thrower_height'], obj.parameters['throwing_speed']))
    
        # Now let's change the thrower_height
        print("changing height...")
        obj.parameters['thrower_height'] = 1.75  # Our thrower is 1.75 m tall
        print("\nUpdated Settings:\n\tthrower_height: {}\n\tthowing_speed: {}".format(obj.parameters['thrower_height'], obj.parameters['throwing_speed']))
        print("Notice how speed changed automatically with height")


    # This allows the module to be executed directly 
    if __name__ == '__main__':
        run_example()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_derived_params.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: derived_params.py <derived_params.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: derived_params.ipynb <derived_params.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
